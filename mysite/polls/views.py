from django.http import HttpResponse, HttpResponseRedirect
from django.shortcuts import get_object_or_404, render
from django.urls import reverse
from django.views import generic
from .models import Choice, Question
from django.utils import timezone


class IndexView(generic.ListView):
    template_name = 'polls/index.html'
    context_object_name = 'latest_question_list'

    # We need to amend the get_queryset() method and change it
    # so that it also checks the date by comparing it with timezone.now().
    def get_queryset(self):
        """Return the last five published questions."""
        # Question.objects.filter(pub_date__lte=timezone.now()) returns a
        # queryset containing Questions whose pub_date is
        # less than or equal to - that is, earlier than or equal to - timezone.now.
        return Question.objects.filter(pub_date__lte=timezone.now()).order_by('-pub_date')[:5]


# By default, the DetailView generic view uses a template called:
# <app name>/<model name>_detail.html.
# In our case, it would use the template "polls/question_detail.html".
# The template_name attribute is used to tell Django to use a specific template
# name instead of the autogenerated default template name.
class DetailView(generic.DetailView):
    # Each generic view needs to know what model it will be acting upon.
    model = Question
    template_name = 'polls/detail.html'


class ResultsView(generic.DetailView):
    # Each generic view needs to know what model it will be acting upon.
    model = Question
    template_name = 'polls/results.html'


def vote(request, question_id):
    question = get_object_or_404(Question, pk=question_id)
    try:
        selected_choice = question.choice_set.get(pk=request.POST['choice'])
    except (KeyError, Choice.DoesNotExist):
        return render(request, 'polls/detail.html', {
            'question': question,
            'error_message': "You didn't select a choice.",
        })
    else:
        selected_choice.votes += 1
        selected_choice.save()
        # Always return an HttpResponseRedirect after successfully dealing
        # with POST data. This prevents data from being posted twice if a
        # user hits the Back button.
        return HttpResponseRedirect(reverse('polls:results', args=(question.id,)))
        # This function helps avoid having to hardcode a URL in the view function.
        # It is given the name of the view that we want to pass control to and
        # the variable portion of the URL pattern that points to that view
